/**
 * Created by yuqigong on 15/10/28.
 */

var DomUtil = {
    /**
     * 通过id查找元素
     * @param  {[type]} id 元素的id
     * @return {[type]}    [description]
     */
    $: function(id) {
        var elements = new Array();
        // 将传来的参数进行遍历
        for (var i = 0; i < arguments.length; i++) {
            var element = arguments[i];
            // 若参数为字符串类型，则取得该参数的id
            if (typeof element == 'string') {
                element = document.getElementById(element);
            }
            // 若参数长度为1，即只传递进来一个参数，则直接返回
            if (arguments.length == 1) {
                return element;
            }
            // 若有多个参数传递进来，则将处理后的值压入elements数组中
            elements.push(element);
        }
        // 返回处理后的参数
        return elements;
    },
    /**
     * 通过classname查找元素
     * @param  {[type]} className [类名]
     * @param  {[type]} tag       [标签名]
     * @return {[type]}           [description]
     */
    getElementsByClassName: function(className, tag) {
        // 对tag进行过滤，取出所有对象，如取出所有input类型对象。
        var allTags = document.getElementsByTagName(tag);
        var matchingElements = new Array();

        // 正则表达式
        className = className.replace(/\-/g, "\\-");
        var regex = new RegExp("(^|\\s)" + className + "(\\s|$)");

        var element;

        // 将取出的tag对象存入数组中。
        for (var i = 0; i < allTags.length; i++) {
            element = allTags[i];
            if (regex.test(element.className)) {
                matchingElements.push(element);
            }
        }
        return matchingElements;
    },
    /**
     * 在目标元素后面插入
     * @param  {[type]} newElement    [description]
     * @param  {[type]} targetElement [description]
     * @return {[type]}               [description]
     */
    insertAfter: function(newElement, targetElement) {
        // 获取 targetElement 的父节点
        var parent = targetElement.parentNode;
        // 判断 targetElement 节点是否为其父节点的最后一个子节点
        if (parent.lastChild == targetElement) {
            // 若是最后一个子节点，则直接把 newElement 加为 targetElement 父节点的子节点即可
            parent.appendChild(newElement);
        } else {
            // 若不是最后一个子节点，则先获取 targetElement 节点的下一个兄弟节点，然后调用 insertBefore() 方法
            parent.insertBefore(newElement, targetElement.nextSibling);
        }
    },
    /**
     * 为元素添加class
     * @param {[type]} element [description]
     * @param {[type]} value   [description]
     */
    addClass: function(element, value) {
        if (!element.className) {
            element.className = value;
        } else {
            var newClassName = element.className;
            newClassName += ' ';
            newClassName += value;
            element.className = newClassName;
        }
    }
};

/**
 * Created by yuqigong on 15/10/23.
 */

var EventUtil = {
    /**
     * 跨浏览器的注册元素事件监听器方法
     * @param element 操作的元素
     * @param type 事件名称
     * @param handler 事件处理程序
     */
    addHandler: function(element, type, handler) {
        if (element.addEventListener) {
            element.addEventListener(type, handler, false);
        } else if (element.attachEvent) {
            element.attachEvent('on' + type, handler);
        } else {
            element['on' + type] = handler;
        }
    },
    /**
     * 跨浏览器的移除元素事件监听器方法
     * @param element 操作的元素
     * @param type 事件名称
     * @param handler 事件处理程序
     */
    removeHandler: function(element, type, handler) {
        if (element.removeEventListener) {
            element.removeEventListener(type, handler, false);
        } else if (element.detachEvent) {
            element.detachEvent('on' + type, handler);
        } else {
            element['on' + type] = null;
        }
    },
    /**
     * 加载多个事件函数
     * @param func
     */
    addLoadEvent: function(func) {
        var oldOnload = window.onload;
        if (typeof window.onload != 'function') {
            window.onload = func;
        } else {
            oldOnload();
            func();
        }
    },
    /**
     * 获取事件本身的引用
     * @param event
     * @returns {*}
     */
    getEvent: function(event) {
        return event ? event : window.event;
    },
    /**
     * 获取该事件的目标元素的引用
     * @param event
     * @returns {*|Object}
     */
    getTarget: function(event) {
        return event.target || event.srcElement;
    },
    /**
     * 跨浏览器的取消事件传递后的默认处理方法
     * @param event
     */
    preventDefault: function(event) {
        if (event.preventDefault) {
            event.preventDefault();
        } else {
            // 在IE下,通过设置event对象的returnValue为false即可
            event.returnValue = false;
        }
    },
    /**
     * 跨浏览器的停止事件传递的方法
     * @param event
     */
    stopPropagation: function(event) {
        if (event.stopPropagation) {
            event.stopPropagation();
        } else {
            // 在IE下,通过设置event对象的cancelBubble为true即可
            event.cancelBubble = true;
        }
    }
};

/**
 * Created by yuqigong on 15/10/23.
 */

var ArrayUtil = {
    /**
     * 数组去重
     * @param arr
     * @returns {Array}
     */
    unique: function(arr) {
        var n = []; // 一个新的临时数组

        for (var i = 0; i < arr.length; i++) { // 遍历当前数组
            // 如果当前数组的第i已经保存进了临时数组，那么跳过，
            // 否则把当前项push到临时数组里面
            if (n.indexOf(arr[i]) === -1) {
                n.push(arr[i]);
            }
        }

        return n;
    },
    /**
     * 数组合并
     * @param arr1
     * @param arr2
     * @returns {Array}
     */
    union: function(arr1, arr2) {
        if (!arr1 instanceof Array || !arr2 instanceof Array) {
            return;
        }

        Array.prototype.push.apply(arr1, arr2);
        return arr1;
    },
    /**
     * 取最大值
     * @param array
     * @returns {number}
     */
    max: function(array) {
        return Math.max.apply(null, array);
    },
    /**
     * 取最小值
     * @param array
     * @returns {number}
     */
    min: function(array) {
        return Math.min.apply(null, array);
    },
    /**
     * 比较两个数组
     * @param a
     * @param b
     * @returns {boolean}
     */
    equalArrays: function(a, b) {
        if (a.length !== b.length) {
            return false;
        }
        for (var i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
};

var FunctionUtil = {
	/**
	 * 判断是否为数组
	 * @param  {[type]}  obj [description]
	 * @return {Boolean}     [description]
	 */
    isArray: function(obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
    },
    /**
     * HTML转义函数
     * @param  {[type]} html [description]
     * @return {[type]}      [description]
     */
    escapeTag: function(html) {
        var replacements = {
            '<': '&lt;',
            '>': '&gt;',
            '&': '&amp;',
            '\'': '&quot;'
        };
        return text.replace(/[<>&']/g, function(character) {
            return replacements[character];
        });
    },
    /**
     * 数组中取一个随机值
     * @param  {[type]} obj [description]
     * @return {[type]}     [description]
     */
    randomByArrayRange: function(obj) {
        if (!this.isArray(obj)) return;

        return obj[Math.floor(Math.random() * obj.length)];
    },
    /**
     * 在一个区间内取一个随机值
     * @param  {[type]} min [description]
     * @param  {[type]} max [description]
     * @return {[type]}     [description]
     */
    randomByMaxRange: function(min, max) {
    	if (!min || !max) return;

        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
};

/**
 * Created by yuqigong on 15/10/28.
 */

var HttpUtil = {
    /**
     * 获取URL中传递的参数
     * @return {[type]} [description]
     */
    getRequest: function() {
        var url = location.search; // 获取url中"?"符后的字串
        var theRequest = new Object();
        if (url.indexOf("?") != -1) {
            var str = url.substr(1);
            strs = str.split("&");
            for (var i = 0; i < strs.length; i++) {
                theRequest[strs[i].split("=")[0]] = (strs[i].split("=")[1]);
            }
        }
        return theRequest;
    }
};

/**
 * Created by yuqigong on 15/10/23.
 */

var NumberUtil = {
    /**
     * 加法
     * @param {[type]} arg [description]
     */
    add: function(arg) {
        var r1, r2, m;
        try {
            r1 = this.toString().split('.')[1].length;
        } catch (e) {
            r1 = 0;
        }
        try {
            r2 = arg.toString().split('.')[1].length;
        } catch (e) {
            r2 = 0;
        }
        m = Math.pow(10, Math.max(r1, r2));
        return (this * m + arg * m) / m;
    },
    /**
     * 减法
     * @param  {[type]} arg [description]
     * @return {[type]}     [description]
     */
    sub: function(arg) {
        return this.add(-arg);
    },
    /**
     * 乘法
     * @param  {[type]} arg [description]
     * @return {[type]}     [description]
     */
    mul: function(arg) {
        var m = 0,
            s1 = this.toString(),
            s2 = arg.toString();
        try {
            m += s1.split('.')[1].length;
        } catch (e) {}
        try {
            m += s2.split('.')[1].length;
        } catch (e) {}
        return Number(s1.replace('.', '')) * Number(s2.replace('.', '')) / Math.pow(10, m);
    },
    /**
     * 除法
     * @param  {[type]} arg [description]
     * @return {[type]}     [description]
     */
    div: function(arg) {
        var t1 = 0,
            t2 = 0,
            r1, r2;
        try {
            t1 = this.toString().split('.')[1].length;
        } catch (e) {}
        try {
            t2 = arg.toString().split('.')[1].length;
        } catch (e) {}
        with(Math) {
            r1 = Number(this.toString().replace('.', ''));
            r2 = Number(arg.toString().replace('.', ''));
            return (r1 / r2) * pow(10, t2 - t1);
        }
    },
}

/**
 * Created by yuqigong on 15/10/23.
 */

var ObjectUtil = {
    clone: function(obj) {

        var buf;

        if (obj instanceof Array) {
            buf = []; // 创建一个空的数组
            var i = obj.length;

            while (i--) {
                buf[i] = clone(obj[i]);
            }

            return buf;
        } else if (obj instanceof Object) {

            buf = {}; // 创建一个空对象

            for (var k in obj) { // 为这个对象添加新的属性
                buf[k] = clone(obj[k]);
            }

            return buf;
        } else {
            return obj;
        }
    }
};

/**
 * Created by yuqigong on 15/10/23.
 */

var StringUtil = {
    /**
     * 去除字符串两边的空白
     * @param  {[type]} str [description]
     * @return {string}     [description]
     * @see http://www.cnblogs.com/rubylouvre/archive/2009/09/18/1568794.html
     */
    trim: function(str) {
        var str = str.replace(/^\s\s*/, ''),
            ws = /\s/,
            i = str.length;
        while (ws.test(str.charAt(--i)));
        return str.slice(0, i + 1);
    },
    /**
     * 判断是否是IE
     * @returns {boolean}
     */
    isIE: function() {
        if (!+[1, ]) {
            return true;
        } else {
            return false;
        }
    }
};
